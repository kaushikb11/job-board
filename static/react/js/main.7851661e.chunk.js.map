{"version":3,"sources":["components/Companies.js","components/JobBoard.js","components/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["Companies","props","companies","activeCompanyId","handleClick","react_default","a","createElement","className","map","company","index","type","es_button","onClick","columns","title","dataIndex","width","loaderDivStyle","textAlign","marginTop","JobBoard","state","query","columnQuery","selectRow","row","window","open","link","searchText","text","_this","setState","toLowerCase","handleChange","value","_this2","this","data","Search","Input","Option","Select","_this$state","filter","job","toString","includes","style","paddingTop","length","placeholder","paddingRight","paddingBottom","onSearch","enterButton","es_select","defaultValue","onChange","table","dataSource","onRow","size","shape","loading","Component","MainPage","App","companiesKeys","cacheData","_callee","regenerator_default","wrap","_context","prev","next","getJobsDataByCompany","stop","arguments","undefined","hasOwnProperty","fetch","concat","method","then","response","json","Object","objectSpread","defineProperty","catch","error","forEach","_","_this$state2","components_Companies","components_MainPage","components_JobBoard","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"js/main.7851661e.chunk.js","sourcesContent":["import React from 'react';\nimport { Button } from 'antd';\n\nconst Companies = (props) => {\n    const { companies, activeCompanyId, handleClick } = props;\n\n    return(\n        <div className='Container'>\n        {companies.map((company, index) => {\n            const type = (activeCompanyId === index) ? 'primary' : 'secondary';\n            return <Button type={type} onClick={() => handleClick(index)}>{company}</Button>})}\n        </div>\n    )\n}\n\nexport default Companies;","import React, { Component } from 'react';\nimport { Table, Button, Input, Select } from 'antd';\nimport PropTypes from 'prop-types';\n\n\nconst columns = [{\n  title: 'Role',\n  dataIndex: 'title',\n  width: 500\n  }, {\n  title: 'Company',\n  dataIndex: 'company',\n  width: 400\n  }, {\n  title: 'Location',\n  dataIndex: 'location',\n}];\n\nconst loaderDivStyle = {\n  textAlign: 'center',\n  marginTop: '120px'\n}\n\nclass JobBoard extends Component {\n\n  state = {\n    query: '',\n    columnQuery: 'title'\n  }\n\n  selectRow = (row) => {\n    window.open(row.link, '_blank');\n  }\n\n  searchText = (text) => {\n    this.setState({ query: text.toLowerCase() })\n  }\n\n  handleChange = (value) => {\n    this.setState({ columnQuery: value, query: '' })\n  }\n\n  render() {\n    let { data } = this.props;\n    const { Search } = Input;\n    const { Option } = Select;\n    const { columnQuery, query } = this.state;\n    data = data ? data.filter(job => job[columnQuery].toString()\n      .toLowerCase().includes(query)) : null;\n    return (\n      <div>\n        <div>\n          {data ? <h3 style={{paddingTop:'10px'}}>{data.length} open roles</h3> : ''}\n        </div>\n        <div className='table'>\n          {data ?\n          <div>\n          <Search placeholder=\"Search\" style={{ width: 300, paddingRight: '20px', paddingBottom: '15px' }}\n            onSearch={value => this.searchText(value)} enterButton />\n          <Select defaultValue=\"title\" style={{ width: 120, paddingBottom: '15px' }} onChange={this.handleChange}>\n            <Option value=\"location\">Location</Option>\n            <Option value=\"title\">Title</Option>\n          </Select>\n          <br/>\n          <Table\n            columns={columns}\n            dataSource={data} \n            onRow={(row) => ({\n              onClick: () => {\n                this.selectRow(row);\n              }\n            })}/></div>: <Button style={loaderDivStyle} size=\"large\" shape=\"circle\" loading />}\n        </div>\n      </div>\n    );\n  }\n}\n\nJobBoard.propTypes = {\n  data: PropTypes.array\n};\n\nexport default JobBoard;","import React from 'react';\n\nconst MainPage = () => {\n    return (\n        <div className='text'>\n            <h2>Select a Company to see Open Positions</h2>\n        </div>\n    );\n}\n\nexport default MainPage;\n","import React, { Component} from 'react';\nimport Companies from './components/Companies';\nimport JobBoard from './components/JobBoard';\nimport MainPage from './components/MainPage';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    companies : ['Twilio', 'AirBnB', 'Yext'],\n    companiesKeys : ['twilio', 'airbnb', 'yext'],\n    cacheData: {},\n    activeCompanyId: null\n  }\n\n  handleClick = async(index) => {\n    await this.setState({ activeCompanyId : index });\n    this.getJobsDataByCompany();\n  }\n\n  getJobsDataByCompany = (index=null) => {\n    const { companiesKeys, activeCompanyId, cacheData } = this.state;\n    const company = (index === null) ? companiesKeys[activeCompanyId] : companiesKeys[index];\n    if (cacheData.hasOwnProperty(company)) {\n      return\n    } else {\n      fetch(`jobs/${company}`, {\n        method: 'GET',\n      })\n      .then((response) => response.json())\n      .then(data => {\n        this.setState({\n          cacheData: {...cacheData, [company]: data}\n        })})\n      .catch( error => null)\n    }\n  }\n\n  componentDidMount() {\n    this.state.companiesKeys.forEach((_, index) => {\n      this.getJobsDataByCompany(index)\n    });\n  }\n\n  render() {\n    const { companies, activeCompanyId, cacheData, companiesKeys } = this.state;\n    return (\n      <div className=\"App\">\n        <div>\n          <h2>Companies</h2>\n          <Companies companies={companies} activeCompanyId={activeCompanyId} handleClick={this.handleClick}/>\n        </div>\n        <div>\n          {(activeCompanyId === null) ? <MainPage/> : <JobBoard data={cacheData[companiesKeys[activeCompanyId]]}/>}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}