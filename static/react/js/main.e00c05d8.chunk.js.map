{"version":3,"sources":["components/Companies.js","components/JobBoard.js","components/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["Companies","props","companies","activeCompanyId","handleClick","react_default","a","createElement","className","map","company","index","type","es_button","onClick","columns","title","dataIndex","loaderDivStyle","textAlign","marginTop","JobBoard","selectRow","row","window","open","link","_this2","this","data","length","table","dataSource","onRow","style","size","shape","loading","Component","MainPage","App","state","companiesKeys","cacheData","_callee","regenerator_default","wrap","_context","prev","next","_this","setState","getJobsDataByCompany","stop","arguments","undefined","_this$state","console","log","hasOwnProperty","fetch","concat","method","then","response","json","Object","objectSpread","defineProperty","catch","error","forEach","_","_this$state2","components_Companies","components_MainPage","components_JobBoard","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"js/main.e00c05d8.chunk.js","sourcesContent":["import React from 'react';\nimport { Button } from 'antd';\n\nconst Companies = (props) => {\n    const { companies, activeCompanyId, handleClick } = props;\n\n    return(\n        <div className='Container'>\n        {companies.map((company, index) => {\n            const type = (activeCompanyId === index) ? 'primary' : 'secondary';\n            return <Button type={type} onClick={() => handleClick(index)}>{company}</Button>})}\n        </div>\n    )\n}\n\nexport default Companies;","import React, { Component } from 'react';\nimport { Table } from 'antd';\nimport { Button } from 'antd';\nimport '../App.css';\n\nconst columns = [{\n  title: 'Role',\n  dataIndex: 'title',\n  }, {\n  title: 'Company',\n  dataIndex: 'company',\n  }, {\n  title: 'Location',\n  dataIndex: 'location',\n}];\n\nconst loaderDivStyle = {\n  textAlign: 'center',\n  marginTop: '120px'\n}\n\nclass JobBoard extends Component {\n\n  selectRow = (row) => {\n    window.open(row.link, '_blank');\n  }\n\n  render() {\n    const { data } = this.props;\n    return (\n      <div>\n        <div>\n          {data ? <h2>{data.length} open roles</h2> : ''}\n        </div>\n        <div className='table'>\n          {data ?\n          <Table\n            columns={columns}\n            dataSource={data}\n            onRow={(row) => ({\n              onClick: () => {\n                this.selectRow(row);\n              }\n            })}/> :<Button style={loaderDivStyle} size=\"large\" shape=\"circle\" loading />}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default JobBoard;","import React from 'react';\n\n\nconst MainPage = () => {\n    return (\n        <div className='text'>\n            <h2>Select a Company to see Open Positions</h2>\n        </div>\n    )\n}\n\nexport default MainPage;\n","import React, { Component} from 'react';\nimport Companies from './components/Companies';\nimport JobBoard from './components/JobBoard';\nimport MainPage from './components/MainPage';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    companies : ['Twilio', 'AirBnB', 'Yext'],\n    companiesKeys : ['twilio', 'airbnb', 'yext'],\n    cacheData: {},\n    activeCompanyId: null\n  }\n\n  handleClick = async(index) => {\n    await this.setState({ activeCompanyId : index})\n    this.getJobsDataByCompany()\n  }\n\n  getJobsDataByCompany = (index=null) => {\n    const { companiesKeys, activeCompanyId, cacheData } = this.state;\n    console.log(index)\n    const company = (index === null) ? companiesKeys[activeCompanyId] : companiesKeys[index];\n    if (cacheData.hasOwnProperty(company)) {\n      this.setState({ data: cacheData[company]})\n    } else {\n      fetch(`jobs/${company}`, {\n        method: 'GET',\n      })\n      .then((response) => response.json())\n      .then(data => {\n        this.setState({\n          cacheData: {...cacheData, [company]: data}\n        })})\n      .catch( error => null)\n    }\n  }\n\n  componentDidMount() {\n    this.state.companiesKeys.forEach((_, index) => {\n      this.getJobsDataByCompany(index)\n    })\n  }\n\n  render() {\n    const { companies, activeCompanyId, cacheData, companiesKeys } = this.state;\n    return (\n      <div className=\"App\">\n        <Companies companies={companies} activeCompanyId={activeCompanyId} handleClick={this.handleClick}/>\n      <div>\n        {(activeCompanyId === null) ? <MainPage/> : <JobBoard data={cacheData[companiesKeys[activeCompanyId]]}/>}\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}